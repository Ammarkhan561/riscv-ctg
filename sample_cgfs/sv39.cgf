# For Licence details look at https://github.com/riscv-software-src/riscv-ctg/-/blob/master/LICENSE.incore

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

invalid_PTE01:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C6)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

invalid_PTE02:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0C6)): 0                   # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

invalid_PTE03:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000006) and (rs2_val  == 0x00200000000000C6)): 0               # checks the PTE permission and level2 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

invalid_PTE04:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D6)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

invalid_PTE05:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D6)): 0                   # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

invalid_PTE06:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000006) and (rs2_val  == 0x00200000000000D6)): 0               # checks the PTE permission and level2 at which PTE is stored 


# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

invalid_PTE07:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # checks if the rs2 matches the " Instruction page fault"
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C6)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

invalid_PTE08:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                        # checks if the rs2 matches the " Instruction page fault"
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0C6)): 0                  # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

invalid_PTE09: 

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                        # checks if the rs2 matches the " Instruction page fault"
    (((rs1_val >> 12 ) == 0x80000000006) and (rs2_val  == 0x00200000000000C6)): 0              # checks the PTE permission and level2 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

invalid_PTE10:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # checks if the rs2 matches the " Instruction page fault"
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D6)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

invalid_PTE11:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                        # checks if the rs2 matches the " Instruction page fault"
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D6)): 0                  # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

invalid_PTE12: 

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                        # checks if the rs2 matches the " Instruction page fault"
    (((rs1_val >> 12 ) == 0x80000000006) and (rs2_val  == 0x00200000000000D6)): 0              # checks the PTE permission and level2 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

access_bit01:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x087)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

access_bit02:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x087)): 0                   # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

access_bit03:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000006) and (rs2_val  == 0x0020000000000087)): 0               # checks the PTE permission and level2 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

access_bit04:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x097)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

access_bit05:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x097)): 0                   # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

access_bit06:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000006) and (rs2_val  == 0x0020000000000097)): 0               # checks the PTE permission and level2 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

access_bit07:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # checks if the rs2 matches the " Instruction page fault"
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x089)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

access_bit08:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # checks if the rs2 matches the " Instruction page fault"
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x089)): 0                   # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

access_bit09:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # checks if the rs2 matches the " Instruction page fault"
    (((rs1_val >> 12 ) == 0x80000000006) and (rs2_val  == 0x0020000000000089)): 0               # checks the PTE permission and level2 at which PTE is stored 


# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

access_bit10:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # checks if the rs2 matches the " Instruction page fault"
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x099)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

access_bit11:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # checks if the rs2 matches the " Instruction page fault"
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x099)): 0                   # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

access_bit12:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # checks if the rs2 matches the " Instruction page fault"
    (((rs1_val >> 12 ) == 0x80000000006) and (rs2_val  == 0x0020000000000099)): 0               # checks the PTE permission and level2 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

dirty_bit01:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x047)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

dirty_bit02:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x047)): 0                   # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

dirty_bit03:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (((rs1_val >> 12 ) == 0x80000000006) and (rs2_val  == 0x0020000000000047)): 0               # checks the PTE permission and level2 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

dirty_bit04:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x057)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

dirty_bit05:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x057)): 0                   # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

dirty_bit06:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (((rs1_val >> 12 ) == 0x80000000006) and (rs2_val  == 0x0020000000000057)): 0               # checks the PTE permission and level2 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

misaligned_superpage01:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0x0FF) == 0x0C7) and (((rs2_val &  0x7FC00) != 0x0))): 0 
                                                                                                # checks the PTE permission,level1 and that ppn0!=0 (misaligned) at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

misaligned_superpage02:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000007) and (rs2_val  == 0x00200000000004C7) and (((rs2_val &  0xFFFFC00) != 0x0))): 0 
                                                                                                # checks the PTE permission,level1 and that either ppn0!=0 or ppn1!=0 (misaligned) at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

misaligned_superpage03:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0x0FF) == 0x0D7) and (((rs2_val &  0x7FC00) != 0x0))): 0 
                                                                                                # checks the PTE permission,level1 and that ppn0!=0 (misaligned) at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

misaligned_superpage04:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000007) and (rs2_val  == 0x00200000000004D7) and (((rs2_val &  0xFFFFC00) != 0x0))): 0 
                                                                                                # checks the PTE permission,level1 and that either ppn0!=0 or ppn1!=0 (misaligned) at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

misaligned_superpage05:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # checks if the rs2 matches the " Instruction page fault"
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0x0FF) == 0x0C9) and (((rs2_val &  0x7FC00) != 0x0))): 0 
                                                                                                # checks the PTE permission,level1 and that ppn0!=0 (misaligned) at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

misaligned_superpage06:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # checks if the rs2 matches the " Instruction page fault"
    (((rs1_val >> 12 ) == 0x80000000007) and (rs2_val  == 0x00200000000004C9) and (((rs2_val &  0xFFFFC00) != 0x0))): 0 
                                                                                                # checks the PTE permission,level1 and that either ppn0!=0 or ppn1!=0 (misaligned) at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

misaligned_superpage07:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # checks if the rs2 matches the " Instruction page fault"
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0x0FF) == 0x0D9) and (((rs2_val &  0x7FC00) != 0x0))): 0 
                                                                                                # checks the PTE permission,level1 and that ppn0!=0 (misaligned) at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

misaligned_superpage08:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.
    
  val_comb:

    (rs2_val == 0xC): 0                                                                         # checks if the rs2 matches the " Instruction page fault"
    (((rs1_val >> 12 ) == 0x80000000007) and (rs2_val  == 0x00200000000004D9) and (((rs2_val &  0xFFFFC00) != 0x0))): 0 
                                                                                                # checks the PTE permission,level1 and that either ppn0!=0 or ppn1!=0 (misaligned) at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

mxr_set01:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.
    (mstatus & 0x80000) == 0x80000: 0                                                           # checks the mstatus.MXR == 1  

  val_comb:

    (rs2_val != 0xF): 0                                                                         # check if the rs2 does not match the "store/AMO page fault
    (rs2_val != 0xD): 0                                                                         # check if the rs2 does not match the "load page fault
    (rs2_val != 0xC): 0                                                                         # checks if the rs2 does not match the " Instruction page fault" 
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C9)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

mxr_set02:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.
    (mstatus & 0x80000) == 0x80000: 0                                                           # checks the mstatus.MXR == 1  

  val_comb:

    (rs2_val != 0xF): 0                                                                         # check if the rs2 does not match the "store/AMO page fault
    (rs2_val != 0xD): 0                                                                         # check if the rs2 does not match the "load page fault
    (rs2_val != 0xC): 0                                                                         # checks if the rs2 does not match the " Instruction page fault" 
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0C9)): 0                   # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

mxr_set03:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.
    (mstatus & 0x80000) == 0x80000: 0                                                           # checks the mstatus.MXR == 1  

  val_comb:

    (rs2_val != 0xF): 0                                                                         # check if the rs2 does not match the "store/AMO page fault
    (rs2_val != 0xD): 0                                                                         # check if the rs2 does not match the "load page fault
    (rs2_val != 0xC): 0                                                                         # checks if the rs2 does not match the " Instruction page fault"    
    (((rs1_val >> 12 ) == 0x80000000006) and (rs2_val  == 0x00200000000000C9)): 0               # checks the PTE permission and level2 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

mxr_set04:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.
    (mstatus & 0x80000) == 0x80000: 0                                                           # checks the mstatus.MXR == 1  

  val_comb:

    (rs2_val != 0xF): 0                                                                         # check if the rs2 does not match the "store/AMO page fault
    (rs2_val != 0xD): 0                                                                         # check if the rs2 does not match the "load page fault
    (rs2_val != 0xC): 0                                                                         # checks if the rs2 does not match the " Instruction page fault" 
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D9)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

mxr_set05:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.
    (mstatus & 0x80000) == 0x80000: 0                                                           # checks the mstatus.MXR == 1  

  val_comb:

    (rs2_val != 0xF): 0                                                                         # check if the rs2 does not match the "store/AMO page fault
    (rs2_val != 0xD): 0                                                                         # check if the rs2 does not match the "load page fault
    (rs2_val != 0xC): 0                                                                         # checks if the rs2 does not match the " Instruction page fault" 
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D9)): 0                   # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

mxr_set06:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.
    (mstatus & 0x80000) == 0x80000: 0                                                           # checks the mstatus.MXR == 1  
  
  val_comb:

    (rs2_val != 0xF): 0                                                                         # check if the rs2 does not match the "store/AMO page fault
    (rs2_val != 0xD): 0                                                                         # check if the rs2 does not match the "load page fault
    (rs2_val != 0xC): 0                                                                         # checks if the rs2 does not match the " Instruction page fault"    
    (((rs1_val >> 12 ) == 0x80000000006) and (rs2_val  == 0x00200000000000D9)): 0               # checks the PTE permission and level2 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

mxr_unset01:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.
    (mstatus & 0x80000) == 0x0    : 0                                                           # checks the mstatus.MXR == 0  

  val_comb:

    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C9)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

mxr_unset02:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.   
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.
    (mstatus & 0x80000) == 0x0    : 0                                                           # checks the mstatus.MXR == 0  

  val_comb:

    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0C9)): 0                   # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

mxr_unset03:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.
    (mstatus & 0x80000) == 0x0    : 0                                                           # checks the mstatus.MXR == 0  
  
  val_comb:

    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000006) and (rs2_val  == 0x00200000000000C9)): 0               # checks the PTE permission and level2 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

mxr_unset04:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.
    (mstatus & 0x80000) == 0x0    : 0                                                           # checks the mstatus.MXR == 0  

  val_comb:

    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D9)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

mxr_unset05:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.   
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.
    (mstatus & 0x80000) == 0x0    : 0                                                           # checks the mstatus.MXR == 0  

  val_comb:

    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D9)): 0                   # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

mxr_unset06:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.
    (mstatus & 0x80000) == 0x0    : 0                                                           # checks the mstatus.MXR == 0  
  
  val_comb:

    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000006) and (rs2_val  == 0x00200000000000D9)): 0               # checks the PTE permission and level2 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

sum_set01:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.
    (mstatus & 0x40000) == 0x40000: 0                                                           # Checks that mstatus.SUM == 1

  val_comb:

    (rs2_val != 0xF): 0                                                                         # check if the rs2 does not match the "store/AMO page fault
    (rs2_val != 0xD): 0                                                                         # check if the rs2 does not match the "load page fault
    (rs2_val != 0xC): 0                                                                         # checks if the rs2 does not match the " Instruction page fault"     (rs2_val != 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D7)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

sum_set02:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.
    (mstatus & 0x40000) == 0x40000: 0                                                           # Checks that mstatus.SUM == 1

  val_comb:

    (rs2_val != 0xF): 0                                                                         # check if the rs2 does not match the "store/AMO page fault
    (rs2_val != 0xD): 0                                                                         # check if the rs2 does not match the "load page fault
    (rs2_val != 0xC): 0                                                                         # checks if the rs2 does not match the " Instruction page fault"     (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D7)): 0                   # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

sum_set03:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.
    (mstatus & 0x40000) == 0x40000: 0                                                           # Checks that mstatus.SUM == 1

  val_comb:

    (rs2_val != 0xF): 0                                                                         # check if the rs2 does not match the "store/AMO page fault
    (rs2_val != 0xD): 0                                                                         # check if the rs2 does not match the "load page fault
    (rs2_val != 0xC): 0                                                                         # checks if the rs2 does not match the " Instruction page fault" 
    (((rs1_val >> 12 ) == 0x80000000006) and (rs2_val  == 0x00200000000000D7)): 0               # checks the PTE permission and level2 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

sum_set04:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.
    (mstatus & 0x40000) == 0x40000: 0                                                           # Checks that mstatus.SUM == 1
    
  val_comb:

    (rs2_val == 0xC): 0                                                                         # checks if the rs2 matches the " Instruction page fault"                                                                        # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D7)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

sum_set05:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.
    (mstatus & 0x40000) == 0x40000: 0                                                           # Checks that mstatus.SUM == 1

  val_comb:

    (rs2_val == 0xC): 0                                                                         # checks if the rs2 matches the " Instruction page fault" 
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D7)): 0                   # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

sum_set06:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.
    (mstatus & 0x40000) == 0x40000: 0                                                           # Checks that mstatus.SUM == 1

  val_comb:

    (rs2_val == 0xC): 0                                                                         # checks if the rs2 matches the " Instruction page fault" 
    (((rs1_val >> 12 ) == 0x80000000006) and (rs2_val  == 0x00200000000000D7)): 0               # checks the PTE permission and level2 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

sum_unset01:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.
    (mstatus & 0x40000) == 0x0    : 0                                                           # Checks that mstatus.SUM == 0

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D7)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

sum_unset02:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.
    (mstatus & 0x40000) == 0x0    : 0                                                           # Checks that mstatus.SUM == 0

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D7)): 0                   # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

sum_unset03:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.
    (mstatus & 0x40000) == 0x0    : 0                                                           # Checks that mstatus.SUM == 0

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000006) and (rs2_val  == 0x00200000000000D7)): 0               # checks the PTE permission and level2 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

sum_unset04:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.
    (mstatus & 0x40000) == 0x0    : 0                                                           # Checks that mstatus.SUM == 0

  val_comb:

    (rs2_val == 0xC): 0                                                                         # checks if the rs2 matches the " Instruction page fault" 
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D7)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

sum_unset05:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.
    (mstatus & 0x40000) == 0x0    : 0                                                           # Checks that mstatus.SUM == 0

  val_comb:

    (rs2_val == 0xC): 0                                                                         # checks if the rs2 matches the " Instruction page fault" 
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D7)): 0                   # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

sum_unset06:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.
    (mstatus & 0x40000) == 0x0    : 0                                                           # Checks that mstatus.SUM == 0

  val_comb:

    (rs2_val == 0xC): 0                                                                         # checks if the rs2 matches the " Instruction page fault" 
    (((rs1_val >> 12 ) == 0x80000000006) and (rs2_val  == 0x00200000000000D7)): 0               # checks the PTE permission and level2 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

ubit_set01:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D1)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

ubit_set02:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val != 0xF): 0                                                                         # check if the rs2 does not match the "store/AMO page fault
    (rs2_val != 0xD): 0                                                                         # check if the rs2 does not match the "load page fault
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D7)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

ubit_set03:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D1)): 0                   # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

ubit_set04:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val != 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val != 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D7)): 0                   # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

ubit_set05:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000006) and (rs2_val  == 0x00200000000000D1)): 0               # checks the PTE permission and level2 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

ubit_set06:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val != 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val != 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000006) and (rs2_val  == 0x00200000000000D7)): 0               # checks the PTE permission and level2 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

ubit_unset01:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C7)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

ubit_unset02:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0C7)): 0                   # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

ubit_unset03:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000006) and (rs2_val  == 0x00200000000000C7)): 0               # checks the PTE permission and level2 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

ubit_unset04:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C7)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

ubit_unset05:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0C7)): 0                   # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

ubit_unset06:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000006) and (rs2_val  == 0x00200000000000C7)): 0               # checks the PTE permission and level2 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

Smode_page_in_Smode01:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val != 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val != 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C7)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

Smode_page_in_Smode02:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val != 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val != 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0C7)): 0                   # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

Smode_page_in_Smode03:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val != 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val != 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000006) and (rs2_val  == 0x00200000000000C7)): 0               # checks the PTE permission and level2 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

Smode_page_in_Smode04:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C1)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

Smode_page_in_Smode05:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0C1)): 0                   # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

Smode_page_in_Smode06:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000006) and (rs2_val  == 0x00200000000000C1)): 0               # checks the PTE permission and level2 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

Smode_page_in_Smode07:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C7)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

Smode_page_in_Smode08:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0C7)): 0                   # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

Smode_page_in_Smode09:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000006) and (rs2_val  == 0x00200000000000C7)): 0               # checks the PTE permission and level2 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

reserved_rwx01:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C5)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

reserved_rwx02:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0C5)): 0                   # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

reserved_rwx03:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000006) and (rs2_val  == 0x00200000000000C5)): 0               # checks the PTE permission and level2 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

reserved_rwx04:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.
  
  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D5)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

reserved_rwx05:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D5)): 0                   # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

reserved_rwx06:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store/AMO page fault
    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80000000006) and (rs2_val  == 0x00200000000000D5)): 0               # checks the PTE permission and level2 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

reserved_rwx07:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.
  
  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # checks if the rs2 matches the " Instruction page fault"
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D5)): 0                   # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

reserved_rwx08:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # checks if the rs2 matches the " Instruction page fault"
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D5)): 0                   # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

reserved_rwx09:

  config:

  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sd          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.

  csr_comb:

    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # checks if the rs2 matches the " Instruction page fault"
    (((rs1_val >> 12 ) == 0x80000000006) and (rs2_val  == 0x00200000000000D5)): 0               # checks the PTE permission and level2 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------
