# For Licence details look at https://github.com/riscv-software-src/riscv-ctg/-/blob/master/LICENSE.incore

#----------------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------------  

check_satp_invalid_PTE: 
   
    config: 

      - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; 
      
    mnemonics:    
    
      csrrw : 0                                   # Sets the expected encoding value for the "csrrw" mnemonic.
          
    csr_comb:

      (satp >> 60) == 0x8 : 0                     # Check if the top 4 bits of the "satp" register indicate sv39 mode.

#----------------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------------  

check_Smode_change_invalid_PTE:
  
    config: 
           
      - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; 
    
    mnemonics:    
    
      csrrs: 0                                    # Sets the expected encoding value for the "csrrs" mnemonic.
    
    csr_comb:

      (mstatus & 0x1800) == 0x0800    : 0         # Ensure the "MPP" bits in "mstatus" are set to "S" mode.
   
#----------------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------------

check_loadstore_fault_invalid_PTE:

    config: 

      - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; 
    
    mnemonics:    
    
      sd : 0                                      # Sets the expected encoding value for the "sd" mnemonic.
    
    val_comb: 

      (rs2_val == 0xF) : 0                        # check if the rs2 matches the "store/AMO page fault"
      (rs2_val == 0xD) : 0                        # check if the rs2 matches the "load page fault"

#----------------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------------

check_pagefault_invalid_PTE:

    config: 

      - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; 
    
    mnemonics:    
    
      sd : 0                                      # Sets the expected encoding value for the "sd" mnemonic.
    
    val_comb:

      (rs2_val == 0xC) : 0                        # checks if the rs2 matches the " Instruction page fault"

#----------------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------------

check_permission_and_level0_for_invalid_PTE:

    config: 

      - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; 
    
    mnemonics:    
   
      sd : 0
    
    val_comb:

      (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C6)) : 0 

#----------------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------------

check_permission_and_leve1_for_invalid_PTE:

    config: 

      - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; 
    
    mnemonics:    
   
      sd : 0
    
    val_comb:

      (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0C6)) : 0 

#----------------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------------

check_permission_and_leve2_for_invalid_PTE:

    config: 

      - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; 
    
    mnemonics:    
   
      sd : 0
    
    val_comb:

      (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0C6)) : 0 

#----------------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------------