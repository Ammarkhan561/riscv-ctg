# For Licence details look at https://github.com/riscv-software-src/riscv-ctg/-/blob/master/LICENSE.incore

check_satp: 
   
    config: 
                                                  # Ensure the ISA contains "I" and "Zicsr" features.
      - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; 

    
    mnemonics:    
    
      csrrw: 0                                    # Set the expected encoding value for the "csrrw" mnemonic to 0.
          
    csr_comb:

      (satp >> 60)       == 0x8       : 0         # Check if the top 4 bits of the "satp" register indicate sv39 mode.
  
check_mode_change:
  
    config: 
                                                  # Ensure the ISA contains "I" and "Zicsr" features.
      - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; 
    
    mnemonics:    
    
      csrrs: 0                                    # Set the expected encoding value for the "csrrs" mnemonic to 0.
    
    csr_comb:

      (mstatus & 0x1800) == 0x0800    : 0         # Ensure the "MPP" bits in "mstatus" are set to "S" mode.
   
check_mcause:

    config: 
                                                  # Ensure the ISA contains "I" and "Zicsr" features.
      - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; 
    
    mnemonics:    
    
      sd : 0
    
    val_comb:

      (rs2_val == 0xF) : 0
      (rs2_val == 0xD) : 0
      (rs2_val == 0xC) : 0

check_permission:

    config: 
                                                  # Ensure the ISA contains "I" and "Zicsr" features.
      - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; 
    
    mnemonics:    
   
      or : 0
    
    val_comb:

      ((rs2_val & 0X3FF) == 0x1) : 0

check_level:

    config: 
                                                  # Ensure the ISA contains "I" and "Zicsr" features.
      - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; 
    
    mnemonics:    
   
      sd : 0
    
    val_comb:

      ((rs1_val >> 12 ) == 0x80000000006)    : 0

            