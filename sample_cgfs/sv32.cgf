# For Licence details look at https://github.com/riscv-software-src/riscv-ctg/-/blob/master/LICENSE.incore

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

invalid_PTE01:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x82002) and ((rs2_val & 0xFFF) == 0x0CE)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

invalid_PTE02:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the store amo fault
    (((rs1_val >> 12 ) == 0x82002) and ((rs2_val & 0xFFF) == 0x0CE)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

invalid_PTE03:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # check if the rs2 matches the Instruction page fault for execute access
    (((rs1_val >> 12 ) == 0x82002) and ((rs2_val & 0xFFF) == 0x0CE)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

invalid_PTE04:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:
    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the load page fault
    (((rs1_val >> 12 ) == 0x82002) and ((rs2_val & 0xFFF) == 0x0DE)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

invalid_PTE05:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.  
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:
    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the store amo fault
    (((rs1_val >> 12 ) == 0x82002) and ((rs2_val & 0xFFF) == 0x0DE)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

invalid_PTE06:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.   
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:
    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # check if the rs2 matches the store amo fault
    (((rs1_val >> 12 ) == 0x82002) and ((rs2_val & 0xFFF) == 0x0DE)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

invalid_PTE07:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x82001) and ((rs2_val & 0xFFF) == 0x0CE)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

invalid_PTE08:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the store amo fault
    (((rs1_val >> 12 ) == 0x82001) and ((rs2_val & 0xFFF) == 0x0CE)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

invalid_PTE09:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # check if the rs2 matches the Instruction page fault for execute access
    (((rs1_val >> 12 ) == 0x82001) and ((rs2_val & 0xFFF) == 0x0C7 )): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

invalid_PTE10:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:
    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x82001) and ((rs2_val & 0xFFF) == 0x0DE)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

invalid_PTE11:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.  
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:
    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the store amo fault
    (((rs1_val >> 12 ) == 0x82001) and ((rs2_val & 0xFFF) == 0x0DE)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

invalid_PTE12:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.   
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:
    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # check if the rs2 matches the store amo fault
    (((rs1_val >> 12 ) == 0x82001) and ((rs2_val & 0xFFF) == 0x0DE)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

misaligned_superpage01:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80006) and ((rs2_val & 0xFFF) == 0x0C3)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

misaligned_superpage02:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the store amo fault
    (((rs1_val >> 12 ) == 0x80006) and ((rs2_val & 0xFFF) == 0x0C7)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

misaligned_superpage03:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x6' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # check if the rs2 matches the Instruction page fault for execute access
    (((rs1_val >> 12 ) == 0x8002A) and ((rs2_val & 0xFFF) == 0x0C7)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

misaligned_superpage04:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x80006) and ((rs2_val & 0xFFF) == 0x0D3)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

misaligned_superpage05:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.   
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the store amo fault
    (((rs1_val >> 12 ) == 0x80006) and ((rs2_val & 0xFFF) == 0x0D7)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

misaligned_superpage06:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x6' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # check if the rs2 matches the Instruction page fault for execute access
    (((rs1_val >> 12 ) == 0x8002A) and ((rs2_val & 0xFFF) == 0x0C7)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

access_bit01:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # check if the rs2 matches the "fetch page fault
    (((rs1_val >> 12 ) == 0x82001) and ((rs2_val & 0xFFF) == 0x08F)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

access_bit02:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x82001) and ((rs2_val & 0xFFF) == 0x08F)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

access_bit03:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store page fault
    (((rs1_val >> 12 ) == 0x82001) and ((rs2_val & 0xFFF) == 0x08F)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

access_bit04:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # check if the rs2 matches the "fetch page fault
    (((rs1_val >> 12 ) == 0x82002) and ((rs2_val & 0xFFF) == 0x08F)): 0                         # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

access_bit05:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x82002) and ((rs2_val & 0xFFF) == 0x087)): 0                         # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

access_bit06:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store page fault
    (((rs1_val >> 12 ) == 0x82002) and ((rs2_val & 0xFFF) == 0x087)): 0                         # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

access_bit07:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # check if the rs2 matches the "fetch page fault
    (((rs1_val >> 12 ) == 0x82001) and ((rs2_val & 0xFFF) == 0x0BF)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

access_bit08:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x82001) and ((rs2_val & 0xFFF) == 0x0BB)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

access_bit09:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store page fault
    (((rs1_val >> 12 ) == 0x82001) and ((rs2_val & 0xFFF) == 0x0BD)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

access_bit10:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # check if the rs2 matches the "fetch page fault
    (((rs1_val >> 12 ) == 0x82002) and ((rs2_val & 0xFFF) == 0x0BF)): 0                         # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

access_bit11:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x82002) and ((rs2_val & 0xFFF) == 0x0BB)): 0                         # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

access_bit12:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store page fault
    (((rs1_val >> 12 ) == 0x82002) and ((rs2_val & 0xFFF) == 0x0BD)): 0                         # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

mxr_unset01:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') and (mstatus & 0x80000 == 0x00000) : 0  
                                                                                                # Ensure the "MPP" bits in "mstatus" are set to "S" mode and MXR bit is unset.

  val_comb:

    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x82002) and ((rs2_val & 0xFFF) == 0x0C9)): 0                         # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

mxr_unset02:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') and (mstatus & 0x80000 == 0x00000) : 0  
                                                                                                # Ensure the "MPP" bits in "mstatus" are set to "S" mode and MXR bit is unset.

  val_comb:

    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x82001) and ((rs2_val & 0xFFF) == 0x0C9)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

mxr_unset03:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic. 
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') and (mstatus & 0x80000 == 0x00000) : 0                      
                                                                                                # Ensure the "MPP" bits in "mstatus" are set to "S" mode and MXR bit is unset.

  val_comb:

    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x82002) and ((rs2_val & 0xFFF) == 0x0D9)): 0                         # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

mxr_unset04:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') and (mstatus & 0x80000 == 0x00000) : 0  
                                                                                                # Ensure the "MPP" bits in "mstatus" are set to "S" mode and MXR bit is unset.

  val_comb:

    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x82001) and ((rs2_val & 0xFFF) == 0x0D9)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

sum_unset01:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') and (mstatus & 0x40000 == 0x00000) : 0
                                                                                                # Ensure the "MPP" bits in "mstatus" are set to "S" mode and SUM bit is unset.

  val_comb:

    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x82002) and ((rs2_val & 0xFFF) == 0x0DB)): 0                         # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

sum_unset02:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') and (mstatus & 0x40000 == 0x00000) : 0
                                                                                                # Ensure the "MPP" bits in "mstatus" are set to "S" mode and SUM bit is unset.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store page fault
    (((rs1_val >> 12 ) == 0x82002) and ((rs2_val & 0xFFF) == 0x0DF)): 0                         # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

sum_unset03:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') and (mstatus & 0x40000 == 0x00000) : 0
                                                                                                # Ensure the "MPP" bits in "mstatus" are set to "S" mode and SUM bit is unset.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # check if the rs2 matches the "fetch page fault
    (((rs1_val >> 12 ) == 0x82002) and ((rs2_val & 0xFFF) == 0x0D9)): 0                         # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

sum_unset04:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') and (mstatus & 0x40000 == 0x00000) : 0
                                                                                                # Ensure the "MPP" bits in "mstatus" are set to "S" mode and SUM bit is unset.

  val_comb:

    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x82001) and ((rs2_val & 0xFFF) == 0x0DB)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

sum_unset05:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') and (mstatus & 0x40000 == 0x00000) : 0
                                                                                                # Ensure the "MPP" bits in "mstatus" are set to "S" mode and SUM bit is unset.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x82001) and ((rs2_val & 0xFFF) == 0x0DF)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

sum_unset06:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') and (mstatus & 0x40000 == 0x00000) : 0
                                                                                                # Ensure the "MPP" bits in "mstatus" are set to "S" mode and SUM bit is unset.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # check if the rs2 matches the "fetch page fault
    (((rs1_val >> 12 ) == 0x82001) and ((rs2_val & 0xFFF) == 0x0D9)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

sum_set01:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') and (mstatus & 0x40000 == 0x40000) : 0
                                                                                                # Ensure the "MPP" bits in "mstatus" are set to "S" mode and SUM bit is set.

  val_comb:

    (rs2_val != 0xD): 0                                                                         # check if the rs2 does not matches the load page fault
    (((rs1_val >> 12 ) == 0x82002) and ((rs2_val & 0xFFF) == 0x0DB)): 0                         # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

sum_set02:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') and (mstatus & 0x40000 == 0x40000) : 0
                                                                                                # Ensure the "MPP" bits in "mstatus" are set to "S" mode and SUM bit is set.

  val_comb:

    (rs2_val != 0xF): 0                                                                         # check if the rs2 does not matches the store page fault
    (((rs1_val >> 12 ) == 0x82002) and ((rs2_val & 0xFFF) == 0x0DF)): 0                         # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

sum_set03:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') and (mstatus & 0x40000 == 0x40000) : 0
                                                                                                # Ensure the "MPP" bits in "mstatus" are set to "S" mode and SUM bit is set.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # check if the rs2 matches the fetch page fault
    (((rs1_val >> 12 ) == 0x82002) and ((rs2_val & 0xFFF) == 0x0D9)): 0                         # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

sum_set04:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') and (mstatus & 0x40000 == 0x40000) : 0
                                                                                                # Ensure the "MPP" bits in "mstatus" are set to "S" mode and SUM bit is set.

  val_comb:

    (rs2_val != 0xD): 0                                                                         # check if the rs2 does not matches the load page fault
    (((rs1_val >> 12 ) == 0x82001) and ((rs2_val & 0xFFF) == 0x0DB)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

sum_set05:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') and (mstatus & 0x40000 == 0x40000) : 0
                                                                                                # Ensure the "MPP" bits in "mstatus" are set to "S" mode and SUM bit is set.

  val_comb:

    (rs2_val != 0xF): 0                                                                         # check if the rs2 does not matches the load page fault
    (((rs1_val >> 12 ) == 0x82001) and ((rs2_val & 0xFFF) == 0x0DF)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

sum_set06:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') and (mstatus & 0x40000 == 0x40000) : 0
                                                                                                # Ensure the "MPP" bits in "mstatus" are set to "S" mode and SUM bit is set.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # check if the rs2 matches the "fetch page fault
    (((rs1_val >> 12 ) == 0x82001) and ((rs2_val & 0xFFF) == 0x0D9)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

pmp_pa01:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    lw          : 0 

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

    (mepc - 0x10000000  >= (((pmpaddr0 << 2) & (0xFFFFFFFF << 12)))) and (mepc - 0x10000000  < ( (((pmpaddr0 << 2) & (0xFFFFFFFF << 12)) + (2**12) ) )) and (pmpcfg0 & 0xFF == 0x1B) : 0

  val_comb:

    (rs2_val == 0x1): 0                                                                         # check if the rs2 matches the instruction access fault
    (((rs1_val >> 12 ) == 0x82001) and ((rs2_val & 0xFFF) == 0x0CF)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

pmp_pa02:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    lw          : 0 

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0x5): 0                                                                         # check if the rs2 matches the load access fault
    (((rs1_val >> 12 ) == 0x82001) and ((rs2_val & 0xFFF) == 0x0CF)): 0                         # checks the PTE permission and level0 at which PTE is stored 
    ((((((rs1_val - 0x10000000) >> 25) + 1) << 25)  >= (((pmpaddr3 << 2) & (0xFFFFFFFF << 0)))) and (((((rs1_val - 0x10000000) >> 25) + 1) << 25) < ( (((pmpaddr3 << 2) & (0xFFFFFFFF << 0)) + (2**0) ) )) and ((pmpcfg0 >> 24) == 0x1E)): 0

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

pmp_pa03:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    lw          : 0 

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0x7): 0                                                                         # check if the rs2 matches the load access fault
    (((rs1_val >> 12 ) == 0x82001) and ((rs2_val & 0xFFF) == 0x0CF)): 0                         # checks the PTE permission and level0 at which PTE is stored 
    ((((((rs1_val - 0x10000000) >> 25) + 1) << 25)  >= (((pmpaddr3 << 2) & (0xFFFFFFFF << 0)))) and (((((rs1_val - 0x10000000) >> 25) + 1) << 25) < ( (((pmpaddr3 << 2) & (0xFFFFFFFF << 0)) + (2**0) ) )) and ((pmpcfg0 >> 24) == 0x1D)): 0

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

pmp_pa04:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    lw          : 0 

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

    (mepc - 0x10000000  >= (((pmpaddr0 << 2) & (0xFFFFFFFF << 12)))) and (mepc - 0x10000000  < ( (((pmpaddr0 << 2) & (0xFFFFFFFF << 12)) + (2**12) ) )) and (pmpcfg0 & 0xFF == 0x1B) : 0

  val_comb:

    (rs2_val == 0x1): 0                                                                         # check if the rs2 matches the instruction access fault
    (((rs1_val >> 12 ) == 0x82002) and ((rs2_val & 0xFFF) == 0x0CF)): 0                         # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

pmp_pa05:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    lw          : 0 

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0x5): 0                                                                         # check if the rs2 matches the load access fault
    (((rs1_val >> 12 ) == 0x82002) and ((rs2_val & 0xFFF) == 0x0CF)): 0                         # checks the PTE permission and level1 at which PTE is stored 
    ((((((rs1_val - 0x10000000) >> 25) + 1) << 25)  >= (((pmpaddr3 << 2) & (0xFFFFFFFF << 0)))) and (((((rs1_val - 0x10000000) >> 25) + 1) << 25) < ( (((pmpaddr3 << 2) & (0xFFFFFFFF << 0)) + (2**0) ) )) and ((pmpcfg0 >> 24) == 0x1E)): 0

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

pmp_pa06:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    lw          : 0 

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0x7): 0                                                                         # check if the rs2 matches the load access fault
    (((rs1_val >> 12 ) == 0x82002) and ((rs2_val & 0xFFF) == 0x0CF)): 0                         # checks the PTE permission and level1 at which PTE is stored 
    ((((((rs1_val - 0x10000000) >> 25) + 1) << 25)  >= (((pmpaddr3 << 2) & (0xFFFFFFFF << 0)))) and (((((rs1_val - 0x10000000) >> 25) + 1) << 25) < ( (((pmpaddr3 << 2) & (0xFFFFFFFF << 0)) + (2**0) ) )) and ((pmpcfg0 >> 24) == 0x1D)): 0

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

pmp_pa07:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic. 
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    lw          : 0 

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

    (mepc - 0x10000000  >= (((pmpaddr0 << 2) & (0xFFFFFFFF << 12)))) and (mepc - 0x10000000  < ( (((pmpaddr0 << 2) & (0xFFFFFFFF << 12)) + (2**12) ) )) and (pmpcfg0 & 0xFF == 0x1B) : 0

  val_comb:

    (rs2_val == 0x1): 0                                                                         # check if the rs2 matches the instruction access fault
    (((rs1_val >> 12 ) == 0x82001) and ((rs2_val & 0xFFF) == 0x0DF)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

pmp_pa08:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic. 
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    lw          : 0 

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0x5): 0                                                                         # check if the rs2 matches the load access fault
    (((rs1_val >> 12 ) == 0x82001) and ((rs2_val & 0xFFF) == 0x0DF)): 0                         # checks the PTE permission and level0 at which PTE is stored 
    ((((((rs1_val - 0x10000000) >> 25) + 1) << 25)  >= (((pmpaddr3 << 2) & (0xFFFFFFFF << 0)))) and (((((rs1_val - 0x10000000) >> 25) + 1) << 25) < ( (((pmpaddr3 << 2) & (0xFFFFFFFF << 0)) + (2**0) ) )) and ((pmpcfg0 >> 24) == 0x1E)): 0

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

pmp_pa09:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic. 
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    lw          : 0 

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0x7): 0                                                                         # check if the rs2 matches the load access fault
    (((rs1_val >> 12 ) == 0x82001) and ((rs2_val & 0xFFF) == 0x0DF)): 0                         # checks the PTE permission and level0 at which PTE is stored 
    ((((((rs1_val - 0x10000000) >> 25) + 1) << 25)  >= (((pmpaddr3 << 2) & (0xFFFFFFFF << 0)))) and (((((rs1_val - 0x10000000) >> 25) + 1) << 25) < ( (((pmpaddr3 << 2) & (0xFFFFFFFF << 0)) + (2**0) ) )) and ((pmpcfg0 >> 24) == 0x1D)): 0

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

pmp_pa10:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    lw          : 0 

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

    (mepc - 0x10000000  >= (((pmpaddr0 << 2) & (0xFFFFFFFF << 12)))) and (mepc - 0x10000000  < ( (((pmpaddr0 << 2) & (0xFFFFFFFF << 12)) + (2**12) ) )) and (pmpcfg0 & 0xFF == 0x1B) : 0

  val_comb:

    (rs2_val == 0x1): 0                                                                         # check if the rs2 matches the instruction access fault
    (((rs1_val >> 12 ) == 0x82002) and ((rs2_val & 0xFFF) == 0x0DF)): 0                         # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

pmp_pa11:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.  
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    lw          : 0 

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0x5): 0                                                                         # check if the rs2 matches the load access fault
    (((rs1_val >> 12 ) == 0x82002) and ((rs2_val & 0xFFF) == 0x0DF)): 0                         # checks the PTE permission and level1 at which PTE is stored 
    ((((((rs1_val - 0x10000000) >> 25) + 1) << 25)  >= (((pmpaddr3 << 2) & (0xFFFFFFFF << 0)))) and (((((rs1_val - 0x10000000) >> 25) + 1) << 25) < ( (((pmpaddr3 << 2) & (0xFFFFFFFF << 0)) + (2**0) ) )) and ((pmpcfg0 >> 24) == 0x1E)): 0

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

pmp_pa12:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.  
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    lw          : 0 

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0x7): 0                                                                         # check if the rs2 matches the load access fault
    (((rs1_val >> 12 ) == 0x82002) and ((rs2_val & 0xFFF) == 0x0DF)): 0                         # checks the PTE permission and level1 at which PTE is stored 
    ((((((rs1_val - 0x10000000) >> 25) + 1) << 25)  >= (((pmpaddr3 << 2) & (0xFFFFFFFF << 0)))) and (((((rs1_val - 0x10000000) >> 25) + 1) << 25) < ( (((pmpaddr3 << 2) & (0xFFFFFFFF << 0)) + (2**0) ) )) and ((pmpcfg0 >> 24) == 0x1D)): 0

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

vm_PTE_U_unset_01:

    config:
    
      - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True
    
    mnemonics:
    
      csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
      csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
      csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic. 

      sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    
    csr_comb:
    
      (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
      (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.
    
    val_comb:
    
      (rs2_val == 0xC): 0                                                                         # check if the rs2 matches the Instruction page fault for execute access
      (((rs1_val >> 12 ) == 0x80802) and ((rs2_val & 0xFFF) == 0x0C9)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

vm_PTE_U_unset_02:
    
    config:
    
      - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True
    
    mnemonics:
    
      csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
      csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
      csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic. 
      sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    
    csr_comb:
    
      (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
      (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.
    
    val_comb:
    
      (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
      (((rs1_val >> 12 ) == 0x80802) and ((rs2_val & 0xFFF) == 0x0C7)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

vm_PTE_U_unset_03:
    
    config:
    
      - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True
    
    mnemonics:
    
      csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
      csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
      csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic. 
      sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    
    csr_comb:
    
      (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
      (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.
    
    val_comb:
    
      (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the store amo fault
      (((rs1_val >> 12 ) == 0x80802) and ((rs2_val & 0xFFF) == 0x0C7)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

vm_PTE_U_unset_04:
    
    config:
    
      - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True
    
    mnemonics:
    
      csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
      csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
      csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic. 
      sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    
    csr_comb:
    
      (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
      (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.
    
    val_comb:
    
      (rs2_val == 0xC): 0                                                                         # check if the rs2 matches the Instruction page fault for execute access
      (((rs1_val >> 12 ) == 0x80801) and ((rs2_val & 0xFFF) == 0x0C9)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

vm_PTE_U_unset_05:
    
    config:
    
      - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True
    
    mnemonics:
    
      csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
      csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
      csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic. 
      sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    
    csr_comb:
    
      (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
      (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.
    
    val_comb:
    
      (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
      (((rs1_val >> 12 ) == 0x80801) and ((rs2_val & 0xFFF) == 0x0C7)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

vm_PTE_U_unset_06:
    
    config:
    
      - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True
    
    mnemonics:
    
      csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
      csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
      csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic. 
      sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    
    csr_comb:
    
      (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
      (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.
    
    val_comb:
    
      (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the store amo fault
      (((rs1_val >> 12 ) == 0x80801) and ((rs2_val & 0xFFF) == 0x0C7)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

vm_PTE_U_set_01:
    
    config:
    
      - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True
    
    mnemonics:
    
      csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
      csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
      csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic. 
      sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    
    csr_comb:
    
      (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
      (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.
    
    val_comb:
    
      (rs2_val != 0xF): 0                                                                         # check if the rs2 does not matches the "store/AMO page fault
      (rs2_val != 0xD): 0                                                                         # check if the rs2 does not matches the "load page fault
      (rs2_val != 0xC): 0                                                                         # checks if the rs2 does not matches the " Instruction page fault"
      (((rs1_val >> 12 ) == 0x80802) and ((rs2_val & 0xFFF) == 0x0D7)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

vm_PTE_U_set_02:
    
    config:
    
      - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True
    
    mnemonics:
    
      csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
      csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
      csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic. 
      sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    
    csr_comb:
    
      (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
      (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.
    
    val_comb:
    
      (rs2_val == 0x0C): 0                                                                         # check if the rs2 matches the Instruction page fault for execute access
      (((rs1_val >> 12 ) == 0x80802) and ((rs2_val & 0xFFF) == 0x0D1)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

vm_PTE_U_set_03:
    
    config:
    
      - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True
    
    mnemonics:
    
      csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
      csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
      csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic. 
      sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    
    csr_comb:
    
      (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
      (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.
    
    val_comb:
    
      (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
      (((rs1_val >> 12 ) == 0x80802) and ((rs2_val & 0xFFF) == 0x0D1)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

vm_PTE_U_set_04:
   
    config:
    
      - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True
   
    mnemonics:
    
      csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
      csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
      csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic. 
      sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    
    csr_comb:
    
      (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
      (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.
    
    val_comb:
    
      (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the store amo fault
      (((rs1_val >> 12 ) == 0x80802) and ((rs2_val & 0xFFF) == 0x0D1)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

vm_PTE_U_set_05:
   
    config:
   
      - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True
    
    mnemonics:
    
      csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
      csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
      csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic. 
      sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    
    csr_comb:
    
      (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
      (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.
    
    val_comb:
    
      (rs2_val != 0xF): 0                                                                         # check if the rs2 does not matches the "store/AMO page fault
      (rs2_val != 0xD): 0                                                                         # check if the rs2 does not matches the "load page fault
      (rs2_val != 0xC): 0                                                                         # checks if the rs2 does not matches the " Instruction page fault"
      (((rs1_val >> 12 ) == 0x80801) and ((rs2_val & 0xFFF) == 0x0D7)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

vm_PTE_U_set_06:
    
    config:
    
      - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True
    
    mnemonics:
    
      csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
      csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
      csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic. 
      sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    
    csr_comb:
    
      (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
      (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.
    
    val_comb:
      
      (rs2_val == 0xC): 0                                                                         # check if the rs2 matches the Instruction page fault for execute access
      (((rs1_val >> 12 ) == 0x80801) and ((rs2_val & 0xFFF) == 0x0D1)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

vm_PTE_U_set_07:
   
    config:
    
      - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True
    
    mnemonics:
    
      csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
      csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
      csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.     
      sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
    
    csr_comb:
    
      (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
      (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.
   
    val_comb:
    
      (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
      (((rs1_val >> 12 ) == 0x80801) and ((rs2_val & 0xFFF) == 0x0D1)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

vm_PTE_U_set_08:
    
    config:
    
      - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True
    
    mnemonics:
    
      csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
      csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
      csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.       
      sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
   
    csr_comb:
    
      (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
      (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.
    
    val_comb:
    
      (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the store amo fault
      (((rs1_val >> 12 ) == 0x80801) and ((rs2_val & 0xFFF) == 0x0D1)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

rwx_access01:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val != 0xD): 0                                                                         # check if the rs2 does not matches the load page fault
    (((rs1_val >> 12 ) == 0x82002) and ((rs2_val & 0xFFF) == 0x0C3)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

rwx_access02:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val != 0xF): 0                                                                         # check if the rs2 doesn not matches the store amo fault
    (((rs1_val >> 12 ) == 0x82002) and ((rs2_val & 0xFFF) == 0x0C7)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

rwx_access03:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val != 0xC): 0                                                                         # check if the rs2 does not  matches the Instruction page fault for execute access
    (((rs1_val >> 12 ) == 0x82002) and ((rs2_val & 0xFFF) == 0x0CF)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

rwx_access04:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val != 0xD): 0                                                                         # check if the rs2 does not matches the load page fault
    (((rs1_val >> 12 ) == 0x82001) and ((rs2_val & 0xFFF) == 0x0C3)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

rwx_access05:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val != 0xF): 0                                                                         # check if the rs2 doesn not matches the store amo fault
    (((rs1_val >> 12 ) == 0x82001) and ((rs2_val & 0xFFF) == 0x0C7)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

rwx_access06:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val != 0xC): 0                                                                         # check if the rs2 does not  matches the Instruction page fault for execute access
    (((rs1_val >> 12 ) == 0x80005) and ((rs2_val & 0xFFF) == 0x0CF)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

rwx_access07:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x82002) and ((rs2_val & 0xFFF) == 0x0C9)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

rwx_access08:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the store amo fault
    (((rs1_val >> 12 ) == 0x82002) and ((rs2_val & 0xFFF) == 0x0C9)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

rwx_access09:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # check if the rs2 matches the Instruction page fault for execute access
    (((rs1_val >> 12 ) == 0x82002) and ((rs2_val & 0xFFF) == 0x0C7)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

rwx_access10:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x82001) and ((rs2_val & 0xFFF) == 0x0C9)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

rwx_access11:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the store amo fault
    (((rs1_val >> 12 ) == 0x82001) and ((rs2_val & 0xFFF) == 0x0C9)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

rwx_access12:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # check if the rs2 matches the Instruction page fault for execute access
    (((rs1_val >> 12 ) == 0x82001) and ((rs2_val & 0xFFF) == 0x0C7)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

dity_bit01:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store page fault
    (((rs1_val >> 12 ) == 0x82002) and ((rs2_val & 0xFFF) == 0x06F)): 0                         # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

dity_bit02:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.   
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store page fault
    (((rs1_val >> 12 ) == 0x82002) and ((rs2_val & 0xFFF) == 0x07F)): 0                         # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

dity_bit03:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store page fault
    (((rs1_val >> 12 ) == 0x82001) and ((rs2_val & 0xFFF) == 0x04F)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

dity_bit04:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store page fault
    (((rs1_val >> 12 ) == 0x82001) and ((rs2_val & 0xFFF) == 0x05F)): 0                         # checks the PTE permission and level0 at which PTE is stored 

nleaf_pte01:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x82001) and ((rs2_val & 0xFFF) == 0x0C1)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

nleaf_pte02:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store page fault
    (((rs1_val >> 12 ) == 0x82001) and ((rs2_val & 0xFFF) == 0x0C1)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

nleaf_pte03:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # check if the rs2 matches the "fetch page fault
    (((rs1_val >> 12 ) == 0x82001) and ((rs2_val & 0xFFF) == 0x0C1)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

nleaf_pte04:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x82001) and ((rs2_val & 0xFFF) == 0x0D1)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

nleaf_pte05:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store page fault
    (((rs1_val >> 12 ) == 0x82001) and ((rs2_val & 0xFFF) == 0x0D1)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

nleaf_pte06:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # check if the rs2 matches the "Fetch page fault
    (((rs1_val >> 12 ) == 0x82001) and ((rs2_val & 0xFFF) == 0x0D1)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

rwx_reserved01:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x82002) and ((rs2_val & 0xFFF) == 0x0E5)): 0                         # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

rwx_reserved02:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store page fault
    (((rs1_val >> 12 ) == 0x82002) and ((rs2_val & 0xFFF) == 0x0E5)): 0                         # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

rwx_reserved03:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # check if the rs2 matches the "fetch page fault
    (((rs1_val >> 12 ) == 0x82002) and ((rs2_val & 0xFFF) == 0x0E5)): 0                         # checks the PTE permission and level1 at which PTE is stored 


# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

rwx_reserved04:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x82002) and ((rs2_val & 0xFFF) == 0x0F5)): 0                         # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

rwx_reserved05:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store page fault
    (((rs1_val >> 12 ) == 0x82002) and ((rs2_val & 0xFFF) == 0x0F5)): 0                         # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

rwx_reserved06:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # check if the rs2 matches the "fetch page fault
    (((rs1_val >> 12 ) == 0x82002) and ((rs2_val & 0xFFF) == 0x0F5)): 0                         # checks the PTE permission and level1 at which PTE is stored

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

rwx_reserved07:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x82001) and ((rs2_val & 0xFFF) == 0x0E5)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

rwx_reserved08:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store page fault
    (((rs1_val >> 12 ) == 0x82001) and ((rs2_val & 0xFFF) == 0x0E5)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

rwx_reserved09:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # check if the rs2 matches the "fetch page fault
    (((rs1_val >> 12 ) == 0x82001) and ((rs2_val & 0xFFF) == 0x0E5)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

rwx_reserved10:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xD): 0                                                                         # check if the rs2 matches the "load page fault
    (((rs1_val >> 12 ) == 0x82001) and ((rs2_val & 0xFFF) == 0x0F5)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

rwx_reserved11:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xF): 0                                                                         # check if the rs2 matches the "store page fault
    (((rs1_val >> 12 ) == 0x82001) and ((rs2_val & 0xFFF) == 0x0F5)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

rwx_reserved12:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

  val_comb:

    (rs2_val == 0xC): 0                                                                         # check if the rs2 matches the "fetch page fault
    (((rs1_val >> 12 ) == 0x82001) and ((rs2_val & 0xFFF) == 0x0F5)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

mstatus_tvm01:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv39 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.
    (mstatus & 0x100000) == 0x100000 : 0                                                        # Check mstatus.TVM = 1

  val_comb:

    (rs2_val == 0x2): 0                                                                         # check if the rs2 matches the "illegal instruction
    (((rs1_val >> 12 ) == 0x82002) and ((rs2_val & 0xFFF) == 0x0EF)): 0                         # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

mstatus_tvm02:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.
    (mstatus & 0x100000) == 0x100000 : 0                                                        # Check mstatus.TVM = 1

  val_comb:

    (rs2_val == 0x2): 0                                                                         # check if the rs2 matches the "illegal instruction
    (((rs1_val >> 12 ) == 0x82002) and ((rs2_val & 0xFFF) == 0x0EF)): 0                         # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

mstatus_tvm03:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.
    (mstatus & 0x100000) == 0x100000 : 0                                                        # Check mstatus.TVM = 1

  val_comb:

    (rs2_val == 0x2): 0                                                                         # check if the rs2 matches the "illegal instruction
    (((rs1_val >> 12 ) == 0x82002) and ((rs2_val & 0xFFF) == 0x0EF)): 0                         # checks the PTE permission and level1 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

mstatus_tvm04:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.
    (mstatus & 0x100000) == 0x100000 : 0                                                        # Check mstatus.TVM = 1

  val_comb:

    (rs2_val == 0x2): 0                                                                         # check if the rs2 matches the "illegal instruction
    (((rs1_val >> 12 ) == 0x82001) and ((rs2_val & 0xFFF) == 0x0EF)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

mstatus_tvm05:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.
    (mstatus & 0x100000) == 0x100000 : 0                                                        # Check mstatus.TVM = 1

  val_comb:

    (rs2_val == 0x2): 0                                                                         # check if the rs2 matches the "illegal instruction
    (((rs1_val >> 12 ) == 0x82001) and ((rs2_val & 0xFFF) == 0x0EF)): 0                         # checks the PTE permission and level0 at which PTE is stored 

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

mstatus_tvm06:

  config:

  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

  mnemonics:

    csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
    csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
    sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

  csr_comb:

    (satp >> 31 == 0x1) and (rs1 == 'x31') and (rd == 'x0'): 0                                  # Check if the top 4 bits of the "satp" register indicate sv32 mode.
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "S" mode.
    (mstatus & 0x100000) == 0x100000 : 0                                                        # Check mstatus.TVM = 1

  val_comb:

    (rs2_val == 0x2): 0                                                                         # check if the rs2 matches the "illegal instruction
    (((rs1_val >> 12 ) == 0x82001) and ((rs2_val & 0xFFF) == 0x0EF)): 0                         # checks the PTE permission and level0 at which PTE is stored 


# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

vm_Bare_mode_01:

    config:

      - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

    mnemonics:

      csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
      csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
      csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.
      sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

    csr_comb:

      (satp >> 31 == 0x0) : 0                                                                     # Check if the top 4 bits of the "satp" register indicate Bare mode.
      (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

    val_comb:

      (rs2_val != 0x2): 0                                                                         # checks if the rs2 does not matches the " illegal instruction fault"

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

vm_Bare_mode_02:

    config:

      - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

    mnemonics:

      csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
      csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
      csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.
      sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

    csr_comb:

      (satp >> 31 == 0x0) : 0                                                                     # Check if the top 4 bits of the "satp" register indicate Bare mode.
      (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

    val_comb:

      (rs2_val == 0x2) : 0                                                                        # checks if the rs2 does not matches the " illegal instruction fault"
      (((rs1_val >> 12 ) == 0x80802) and ((rs2_val & 0xFFF) == 0x0D9)): 0                         # checks the PTE permission and level0 at which PTE is stored

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

vm_Bare_mode_03:

    config:

      - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

    mnemonics:

      csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
      csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
      csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.
      sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

    csr_comb:

      (satp >> 31 == 0x0) : 0                                                                     # Check if the top 4 bits of the "satp" register indicate Bare mode.
      (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

    val_comb:

      (rs2_val != 0x2): 0                                                                         # checks if the rs2 does not matches the " illegal instruction fault"
# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

vm_Bare_mode_04:

    config:
 
      - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True
 
    mnemonics:
 
      csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
      csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
      csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.
      sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.
 
    csr_comb:
 
      (satp >> 31 == 0x0) : 0                                                                     # Check if the top 4 bits of the "satp" register indicate Bare mode.
      (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.
 
    val_comb:
 
      (rs2_val == 0x2) : 0                                                                        # checks if the rs2 does not matches the " illegal instruction fault"
      (((rs1_val >> 12 ) == 0x80801) and ((rs2_val & 0xFFF) == 0x0D9)): 0                         # checks the PTE permission and level0 at which PTE is stored

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------
vm_Bare_mode_05:

    config:

      - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

    mnemonics:

      csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
      csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
      csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.
      sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

    csr_comb:

      (satp >> 31 == 0x0) : 0                                                                     # Check if the top 4 bits of the "satp" register indicate Bare mode.
      (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

    val_comb:

      (rs2_val == 0x2) : 0                                                                        # checks if the rs2 does not matches the " illegal instruction fault"
      (((rs1_val >> 12 ) == 0x80802) and ((rs2_val & 0xFFF) == 0x0D9)): 0                         # checks the PTE permission and level0 at which PTE is stored

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------

vm_Bare_mode_06:

    config:

      - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True; def TEST_CASE_1=True

    mnemonics:

      csrrw       : 0                                                                             # Sets the expected encoding value for the "csrrw" mnemonic.
      csrrs       : 0                                                                             # Sets the expected encoding value for the "csrrs" mnemonic.
      csrrc       : 0                                                                             # Sets the expected encoding value for the "csrrc" mnemonic.
      sw          : 0                                                                             # Sets the expected encoding value for the "sd" mnemonic.

    csr_comb:

      (satp >> 31 == 0x0) : 0                                                                     # Check if the top 4 bits of the "satp" register indicate Bare mode.
      (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0') : 0                      # Ensure the "MPP" bits in "mstatus" are set to "U" mode.

    val_comb:

      (rs2_val == 0x2) : 0                                                                        # checks if the rs2 does not matches the " illegal instruction fault"
      (((rs1_val >> 12 ) == 0x80801) and ((rs2_val & 0xFFF) == 0x0D9)): 0                         # checks the PTE permission and level0 at which PTE is stored

# *----------------------------------------------------------------------------------------------------------------------
# *----------------------------------------------------------------------------------------------------------------------