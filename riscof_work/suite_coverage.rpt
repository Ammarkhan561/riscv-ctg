Smode_page_in_Smode01:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 15
    csrrw: 22
    sd: 40
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C7)): 1
    (rs2_val != 0xD): 77
    (rs2_val != 0xF): 77
    coverage: 3/3
  total_coverage: 8/8
Smode_page_in_Smode02:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 15
    csrrw: 22
    sd: 40
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0C7)): 1
    (rs2_val != 0xD): 77
    (rs2_val != 0xF): 77
    coverage: 3/3
  total_coverage: 8/8
Smode_page_in_Smode03:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 15
    csrrw: 22
    sd: 40
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0C7)) if rs2_val is not None else None: 1
    (rs2_val != 0xD): 77
    (rs2_val != 0xF): 77
    coverage: 3/3
  total_coverage: 8/8
Smode_page_in_Smode04:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 25
    csrrw: 28
    sd: 64
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C1)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
Smode_page_in_Smode05:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 25
    csrrw: 28
    sd: 64
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0C1)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
Smode_page_in_Smode06:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 25
    csrrw: 28
    sd: 64
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0C1)) if rs2_val is not None else None: 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
Smode_page_in_Smode07:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 55
    csrrw: 45
    sd: 130
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C7)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
Smode_page_in_Smode08:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 55
    csrrw: 45
    sd: 130
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0C7)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
Smode_page_in_Smode09:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 55
    csrrw: 45
    sd: 130
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0C7)) if rs2_val is not None else None: 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
access_bit01:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 25
    csrrw: 28
    sd: 64
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x087)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
access_bit02:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 25
    csrrw: 28
    sd: 64
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x087)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
access_bit03:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 25
    csrrw: 28
    sd: 64
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x087)) if rs2_val is not None else None: 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
access_bit04:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrc: 1
    csrrs: 24
    csrrw: 28
    sd: 68
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x097)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 9/9
access_bit05:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrc: 1
    csrrs: 24
    csrrw: 28
    sd: 68
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x097)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 9/9
access_bit06:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrc: 1
    csrrs: 24
    csrrw: 28
    sd: 68
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x097)) if rs2_val is not None else None: 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 9/9
access_bit07:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 55
    csrrw: 45
    sd: 130
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x089)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
access_bit08:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 55
    csrrw: 45
    sd: 130
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x089)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
access_bit09:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 55
    csrrw: 45
    sd: 130
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x089)) if rs2_val is not None else None: 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
access_bit10:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrc: 1
    csrrs: 54
    csrrw: 45
    sd: 134
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x099)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 8/8
access_bit11:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrc: 1
    csrrs: 54
    csrrw: 45
    sd: 134
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x099)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 8/8
access_bit12:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrc: 1
    csrrs: 54
    csrrw: 45
    sd: 134
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x099)) if rs2_val is not None else None: 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 8/8
datasets:
  all_fregs:
    f0: 0
    f1: 0
    f10: 0
    f11: 0
    f12: 0
    f13: 0
    f14: 0
    f15: 0
    f16: 0
    f17: 0
    f18: 0
    f19: 0
    f2: 0
    f20: 0
    f21: 0
    f22: 0
    f23: 0
    f24: 0
    f25: 0
    f26: 0
    f27: 0
    f28: 0
    f29: 0
    f3: 0
    f30: 0
    f31: 0
    f4: 0
    f5: 0
    f6: 0
    f7: 0
    f8: 0
    f9: 0
  all_regs:
    x0: 0
    x1: 0
    x10: 0
    x11: 0
    x12: 0
    x13: 0
    x14: 0
    x15: 0
    x16: 0
    x17: 0
    x18: 0
    x19: 0
    x2: 0
    x20: 0
    x21: 0
    x22: 0
    x23: 0
    x24: 0
    x25: 0
    x26: 0
    x27: 0
    x28: 0
    x29: 0
    x3: 0
    x30: 0
    x31: 0
    x4: 0
    x5: 0
    x6: 0
    x7: 0
    x8: 0
    x9: 0
  all_regs_mx0:
    x1: 0
    x10: 0
    x11: 0
    x12: 0
    x13: 0
    x14: 0
    x15: 0
    x16: 0
    x17: 0
    x18: 0
    x19: 0
    x2: 0
    x20: 0
    x21: 0
    x22: 0
    x23: 0
    x24: 0
    x25: 0
    x26: 0
    x27: 0
    x28: 0
    x29: 0
    x3: 0
    x30: 0
    x31: 0
    x4: 0
    x5: 0
    x6: 0
    x7: 0
    x8: 0
    x9: 0
  all_regs_mx2:
    x1: 0
    x10: 0
    x11: 0
    x12: 0
    x13: 0
    x14: 0
    x15: 0
    x16: 0
    x17: 0
    x18: 0
    x19: 0
    x20: 0
    x21: 0
    x22: 0
    x23: 0
    x24: 0
    x25: 0
    x26: 0
    x27: 0
    x28: 0
    x29: 0
    x3: 0
    x30: 0
    x31: 0
    x4: 0
    x5: 0
    x6: 0
    x7: 0
    x8: 0
    x9: 0
  base_rs1val_sgn:
    rs1_val == (-2**(xlen-1)): 0
    rs1_val == (2**(xlen-1)-1): 0
    rs1_val == 0: 0
    rs1_val == 1: 0
  base_rs1val_unsgn:
    rs1_val == (2**(xlen)-1): 0
    rs1_val == 0: 0
    rs1_val == 1: 0
  base_rs2val_sgn:
    rs2_val == (-2**(xlen-1)): 0
    rs2_val == (2**(xlen-1)-1): 0
    rs2_val == 0: 0
    rs2_val == 1: 0
  base_rs2val_unsgn:
    rs2_val == (2**(xlen)-1): 0
    rs2_val == 0: 0
    rs2_val == 1: 0
  base_rs3val_sgn:
    rs3_val == (-2**(xlen-1)): 0
    rs3_val == (2**(xlen-1)-1): 0
    rs3_val == 0: 0
    rs3_val == 1: 0
  base_rs3val_unsgn:
    rs3_val == (2**(xlen)-1): 0
    rs3_val == 0: 0
    rs3_val == 1: 0
  bfmt_base_branch_val_align_sgn:
    rs1_val < 0 and rs2_val < 0 and imm_val & 0x03 == 0: 0
    rs1_val < 0 and rs2_val > 0 and imm_val & 0x03 == 0: 0
    rs1_val < rs2_val and imm_val < 0 and imm_val & 0x03 == 0: 0
    rs1_val < rs2_val and imm_val > 0 and imm_val & 0x03 == 0: 0
    rs1_val == rs2_val and imm_val < 0 and imm_val & 0x03 == 0: 0
    rs1_val == rs2_val and imm_val > 0 and imm_val & 0x03 == 0: 0
    rs1_val > 0 and rs2_val < 0 and imm_val & 0x03 == 0: 0
    rs1_val > 0 and rs2_val > 0 and imm_val & 0x03 == 0: 0
    rs1_val > rs2_val and imm_val < 0 and imm_val & 0x03 == 0: 0
    rs1_val > rs2_val and imm_val > 0 and imm_val & 0x03 == 0: 0
  bfmt_base_branch_val_align_unsgn:
    rs1_val > 0 and rs2_val > 0: 0
    'rs1_val > 0 and rs2_val > 0 and rs1_val < rs2_val and imm_val < 0 ': 0
    'rs1_val > 0 and rs2_val > 0 and rs1_val < rs2_val and imm_val > 0 ': 0
    rs1_val > 0 and rs2_val > 0 and rs1_val == rs2_val and imm_val < 0: 0
    rs1_val > 0 and rs2_val > 0 and rs1_val == rs2_val and imm_val > 0: 0
    'rs1_val > 0 and rs2_val > 0 and rs1_val > rs2_val and imm_val < 0 ': 0
    'rs1_val > 0 and rs2_val > 0 and rs1_val > rs2_val and imm_val > 0 ': 0
  c_regs:
    x10: 0
    x11: 0
    x12: 0
    x13: 0
    x14: 0
    x15: 0
    x8: 0
    x9: 0
  cbfmt_immval_sgn:
    imm_val == (-2**(6-1)): 0
    imm_val == (2**(6-1)-1): 0
    imm_val == 0: 0
    imm_val == 1: 0
  cbimm_val_walking:
    alternate("imm_val",6): 0
    walking_ones("imm_val", 6): 0
    walking_zeros("imm_val", 6): 0
  crfmt_val_comb_sgn:
    rs2_val < 0: 0
    rs2_val > 0: 0
  ifmt_base_immval_sgn:
    imm_val == (-2**(12-1)): 0
    imm_val == (2**(12-1)-1): 0
    imm_val == 0: 0
    imm_val == 1: 0
  ifmt_base_immval_sgn_len:
    imm_val == (-2**(ceil(log(xlen,2))-1)): 0
    imm_val == (2**(ceil(log(xlen,2))-1)-1): 0
    imm_val == 0: 0
    imm_val == 1: 0
  ifmt_base_immval_unsgn:
    imm_val == (2**(12)-1): 0
    imm_val == 0: 0
    imm_val == 1: 0
  ifmt_base_immval_unsgn_len_sub_3:
    imm_val == (2**(ceil(log(xlen,2))-3)-1): 0
    imm_val == 0: 0
    imm_val == 1: 0
  ifmt_base_shift:
    rs1_val < 0 and imm_val == (xlen-1): 0
    rs1_val < 0 and imm_val == 0: 0
    rs1_val < 0 and imm_val > 0 and imm_val < xlen: 0
    rs1_val == (-2**(xlen-1)) and imm_val >= 0 and imm_val < xlen: 0
    rs1_val == (2**(xlen-1)-1) and imm_val >= 0 and imm_val < xlen: 0
    rs1_val == 0 and imm_val >= 0 and imm_val < xlen: 0
    rs1_val == 1 and imm_val >= 0 and imm_val < xlen: 0
    rs1_val == imm_val and imm_val > 0 and imm_val < xlen: 0
    rs1_val > 0 and imm_val == (xlen-1): 0
    rs1_val > 0 and imm_val == 0: 0
    rs1_val > 0 and imm_val > 0 and imm_val < xlen: 0
  ifmt_base_shift_32w:
    rs1_val < 0 and imm_val == 0: 0
    rs1_val < 0 and imm_val == 31: 0
    rs1_val < 0 and imm_val > 0 and imm_val < 32: 0
    rs1_val == (-2**(xlen-1)) and imm_val >= 0 and imm_val < 32: 0
    rs1_val == (2**(xlen-1)-1) and imm_val >= 0 and imm_val < 32: 0
    rs1_val == 0 and imm_val >= 0 and imm_val < 32: 0
    rs1_val == 1 and imm_val >= 0 and imm_val < 32: 0
    rs1_val == imm_val and imm_val > 0 and imm_val < 32: 0
    rs1_val > 0 and imm_val == 0: 0
    rs1_val > 0 and imm_val == 31: 0
    rs1_val > 0 and imm_val > 0 and imm_val < 32: 0
  ifmt_immval_walking:
    alternate("imm_val",12): 0
    walking_ones("imm_val", 12): 0
    walking_zeros("imm_val", 12): 0
  ifmt_immval_walking_5u:
    alternate("imm_val", 5, False): 0
    walking_ones("imm_val", 5, False): 0
    walking_zeros("imm_val", 5, False): 0
  ifmt_immval_walking_len:
    alternate("imm_val",ceil(log(xlen,2)), False): 0
    walking_ones("imm_val", ceil(log(xlen,2)), False): 0
    walking_zeros("imm_val", ceil(log(xlen,2)), False): 0
  ifmt_immval_walking_len_sub_3:
    alternate("imm_val", ceil(log(xlen,2))-3, False): 0
    walking_ones("imm_val", ceil(log(xlen,2))-3, False): 0
    walking_zeros("imm_val", ceil(log(xlen,2))-3, False): 0
  ifmt_immval_walking_unsgn:
    alternate("imm_val",12,False): 0
    walking_ones("imm_val", 12,False): 0
    walking_zeros("imm_val", 12,False): 0
  ifmt_op_comb:
    rs1 != rd: 0
    rs1 == rd: 0
  ifmt_val_comb_sgn:
    rs1_val != imm_val: 0
    rs1_val < 0 and imm_val < 0: 0
    rs1_val < 0 and imm_val > 0: 0
    rs1_val == imm_val: 0
    rs1_val > 0 and imm_val < 0: 0
    rs1_val > 0 and imm_val > 0: 0
  ifmt_val_comb_unsgn:
    rs1_val != imm_val and rs1_val > 0 and imm_val > 0: 0
    rs1_val == imm_val and rs1_val > 0 and imm_val > 0: 0
  pair_regs:
    x10: 0
    x12: 0
    x14: 0
    x16: 0
    x18: 0
    x2: 0
    x20: 0
    x22: 0
    x24: 0
    x26: 0
    x28: 0
    x30: 0
    x4: 0
    x6: 0
    x8: 0
  r4fmt_op_comb:
    rd == rs2 == rs3 != rs1: 0
    rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd: 0
    rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2: 0
    rs1 == rd == rs3 != rs2: 0
    rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3: 0
    rs1 == rs2 == rd != rs3: 0
    rs1 == rs2 == rs3 != rd: 0
    rs1 == rs2 == rs3 == rd: 0
    rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2: 0
    rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1: 0
    rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1: 0
    rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1: 0
  rfmt_base_shift:
    rs1_val < 0 and rs2_val == 0: 0
    rs1_val < 0 and rs2_val > 0 and rs2_val < xlen: 0
    rs1_val == (-2**(xlen-1)) and rs2_val >= 0 and rs2_val < xlen: 0
    rs1_val == (2**(xlen-1)-1) and rs2_val >= 0 and rs2_val < xlen: 0
    rs1_val == 0 and rs2_val >= 0 and rs2_val < xlen: 0
    rs1_val == 1 and rs2_val >= 0 and rs2_val < xlen: 0
    rs1_val == rs2_val and rs2_val > 0 and rs2_val < xlen: 0
    rs1_val > 0 and rs2_val == 0: 0
    rs1_val > 0 and rs2_val > 0 and rs2_val < xlen: 0
  rfmt_op_comb:
    rs1 != rs2  and rs1 != rd and rs2 != rd: 0
    rs1 == rd != rs2: 0
    rs1 == rs2 != rd: 0
    rs1 == rs2 == rd: 0
    rs2 == rd != rs1: 0
  rfmt_val_comb_sgn:
    rs1_val != rs2_val: 0
    rs1_val < 0 and rs2_val < 0: 0
    rs1_val < 0 and rs2_val > 0: 0
    rs1_val == rs2_val: 0
    rs1_val > 0 and rs2_val < 0: 0
    rs1_val > 0 and rs2_val > 0: 0
  rfmt_val_comb_unsgn:
    rs1_val != rs2_val and rs1_val > 0 and rs2_val > 0: 0
    rs1_val == rs2_val and rs1_val > 0 and rs2_val > 0: 0
    rs1_val > 0 and rs2_val > 0: 0
  rs1val_walking:
    alternate("rs1_val",xlen): 0
    walking_ones("rs1_val", xlen): 0
    walking_zeros("rs1_val", xlen): 0
  rs1val_walking_unsgn:
    alternate("rs1_val",xlen,False): 0
    walking_ones("rs1_val", xlen,False): 0
    walking_zeros("rs1_val", xlen,False): 0
  rs2val_walking:
    alternate("rs2_val",xlen): 0
    walking_ones("rs2_val", xlen): 0
    walking_zeros("rs2_val", xlen): 0
  rs2val_walking_unsgn:
    alternate("rs2_val",xlen,False): 0
    walking_ones("rs2_val", xlen,False): 0
    walking_zeros("rs2_val", xlen,False): 0
  rs3val_walking:
    alternate("rs3_val",xlen): 0
    walking_ones("rs3_val", xlen): 0
    walking_zeros("rs3_val", xlen): 0
  rv32e_regs:
    x0: 0
    x1: 0
    x10: 0
    x11: 0
    x12: 0
    x13: 0
    x14: 0
    x15: 0
    x2: 0
    x3: 0
    x4: 0
    x5: 0
    x6: 0
    x7: 0
    x8: 0
    x9: 0
  rv32e_regs_mx0:
    x1: 0
    x10: 0
    x11: 0
    x12: 0
    x13: 0
    x14: 0
    x15: 0
    x2: 0
    x3: 0
    x4: 0
    x5: 0
    x6: 0
    x7: 0
    x8: 0
    x9: 0
  rv32e_regs_mx2:
    x1: 0
    x10: 0
    x11: 0
    x12: 0
    x13: 0
    x14: 0
    x15: 0
    x3: 0
    x4: 0
    x5: 0
    x6: 0
    x7: 0
    x8: 0
    x9: 0
  rvp64_rs1val_sgn:
    rs1_val == (-2**63): 0
    rs1_val == (2**63-1): 0
    rs1_val == 0: 0
    rs1_val == 1: 0
  rvp64_rs1val_unsgn:
    rs1_val == (2**64-1): 0
    rs1_val == 0: 0
    rs1_val == 1: 0
  rvp64_rs1val_walking_sgn:
    alternate("rs1_val",64): 0
    walking_ones("rs1_val", 64): 0
    walking_zeros("rs1_val", 64): 0
  rvp64_rs1val_walking_unsgn:
    alternate("rs1_val",64, signed=False): 0
    walking_ones("rs1_val", 64, signed=False): 0
    walking_zeros("rs1_val", 64, signed=False): 0
  rvp64_rs2val_sgn:
    rs2_val == (-2**63): 0
    rs2_val == (2**63-1): 0
    rs2_val == 0: 0
    rs2_val == 1: 0
  rvp64_rs2val_unsgn:
    rs2_val == (2**64-1): 0
    rs2_val == 0: 0
    rs2_val == 1: 0
  rvp64_rs2val_walking_sgn:
    alternate("rs2_val",64): 0
    walking_ones("rs2_val", 64): 0
    walking_zeros("rs2_val", 64): 0
  rvp64_rs2val_walking_unsgn:
    alternate("rs2_val",64, signed=False): 0
    walking_ones("rs2_val", 64, signed=False): 0
    walking_zeros("rs2_val", 64, signed=False): 0
  sfmt_op_comb:
    rs1 != rs2: 0
    rs1 == rs2: 0
dirty_bit01:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 20
    csrrw: 25
    sd: 52
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x047)): 1
    (rs2_val == 0xF): 1
    coverage: 2/2
  total_coverage: 7/7
dirty_bit02:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 20
    csrrw: 25
    sd: 52
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x047)): 1
    (rs2_val == 0xF): 1
    coverage: 2/2
  total_coverage: 7/7
dirty_bit03:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 20
    csrrw: 25
    sd: 52
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x047)) if rs2_val is not None else None: 1
    (rs2_val == 0xF): 1
    coverage: 2/2
  total_coverage: 7/7
dirty_bit04:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrc: 1
    csrrs: 19
    csrrw: 25
    sd: 56
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x057)): 1
    (rs2_val == 0xF): 1
    coverage: 2/2
  total_coverage: 8/8
dirty_bit05:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrc: 1
    csrrs: 19
    csrrw: 25
    sd: 56
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x057)): 1
    (rs2_val == 0xF): 1
    coverage: 2/2
  total_coverage: 8/8
dirty_bit06:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrc: 1
    csrrs: 19
    csrrw: 25
    sd: 56
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x057)) if rs2_val is not None else None: 1
    (rs2_val == 0xF): 1
    coverage: 2/2
  total_coverage: 8/8
invalid_PTE01:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 25
    csrrw: 28
    sd: 64
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C6)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
invalid_PTE02:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 25
    csrrw: 28
    sd: 64
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0C6)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
invalid_PTE03:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 25
    csrrw: 28
    sd: 64
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0C6)) if rs2_val is not None else None: 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
invalid_PTE04:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrc: 1
    csrrs: 24
    csrrw: 28
    sd: 68
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D6)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 9/9
invalid_PTE05:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrc: 1
    csrrs: 24
    csrrw: 28
    sd: 68
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D6)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 9/9
invalid_PTE06:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrc: 1
    csrrs: 24
    csrrw: 28
    sd: 68
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0D6)) if rs2_val is not None else None: 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 9/9
invalid_PTE07:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 55
    csrrw: 45
    sd: 130
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C6)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
invalid_PTE08:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 55
    csrrw: 45
    sd: 130
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0C6)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
invalid_PTE09:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 55
    csrrw: 45
    sd: 130
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0C6)) if rs2_val is not None else None: 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
invalid_PTE10:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrc: 1
    csrrs: 54
    csrrw: 45
    sd: 134
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D6)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 8/8
invalid_PTE11:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrc: 1
    csrrs: 54
    csrrw: 45
    sd: 134
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D6)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 8/8
invalid_PTE12:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrc: 1
    csrrs: 54
    csrrw: 45
    sd: 134
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0D6)) if rs2_val is not None else None: 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 8/8
misaligned_superpage01:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 25
    csrrw: 28
    sd: 64
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0x0FF) == 0x0C7) and (((rs2_val &  0x7FC00) != 0x0))): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
misaligned_superpage02:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 25
    csrrw: 28
    sd: 64
    coverage: 3/3
  val_comb:
    ? (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x4C7) and (((rs2_val
      &  0xFFFFC00) != 0x0))) if rs2_val is not None else None
    : 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
misaligned_superpage03:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrc: 1
    csrrs: 24
    csrrw: 28
    sd: 68
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0x0FF) == 0x0D7) and (((rs2_val &  0x7FC00) != 0x0))): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 9/9
misaligned_superpage04:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrc: 1
    csrrs: 24
    csrrw: 28
    sd: 68
    coverage: 4/4
  val_comb:
    ? (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x4D7) and (((rs2_val
      &  0xFFFFC00) != 0x0))) if rs2_val is not None else None
    : 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 9/9
misaligned_superpage05:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 55
    csrrw: 45
    sd: 130
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0x0FF) == 0x0C9) and (((rs2_val &  0x7FC00) != 0x0))): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
misaligned_superpage06:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 55
    csrrw: 45
    sd: 130
    coverage: 3/3
  val_comb:
    ? (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x4C9) and (((rs2_val
      &  0xFFFFC00) != 0x0))) if rs2_val is not None else None
    : 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 7/7
misaligned_superpage07:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrc: 1
    csrrs: 54
    csrrw: 45
    sd: 134
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0x0FF) == 0x0D9) and (((rs2_val &  0x7FC00) != 0x0))): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 8/8
misaligned_superpage08:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrc: 1
    csrrs: 54
    csrrw: 45
    sd: 134
    coverage: 4/4
  val_comb:
    ? (((rs1_val >> 12 ) == 0x80000000007) and ((rs2_val & 0xFFF) == 0x4D9) and (((rs2_val
      &  0xFFFFC00) != 0x0))) if rs2_val is not None else None
    : 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 8/8
mxr_set01:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (mstatus & 0x80000) == 0x80000: 13
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 3/3
  mnemonics:
    csrrs: 16
    csrrw: 22
    sd: 39
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C9)): 2
    (rs2_val != 0xC): 77
    (rs2_val != 0xD): 77
    (rs2_val != 0xF): 77
    coverage: 4/4
  total_coverage: 10/10
mxr_set02:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (mstatus & 0x80000) == 0x80000: 13
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 3/3
  mnemonics:
    csrrs: 16
    csrrw: 22
    sd: 39
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0C9)): 2
    (rs2_val != 0xC): 77
    (rs2_val != 0xD): 77
    (rs2_val != 0xF): 77
    coverage: 4/4
  total_coverage: 10/10
mxr_set03:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (mstatus & 0x80000) == 0x80000: 13
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 3/3
  mnemonics:
    csrrs: 16
    csrrw: 22
    sd: 39
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0C9)) if rs2_val is not None else None: 2
    (rs2_val != 0xC): 77
    (rs2_val != 0xD): 77
    (rs2_val != 0xF): 77
    coverage: 4/4
  total_coverage: 10/10
mxr_set04:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (mstatus & 0x80000) == 0x80000: 13
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 3/3
  mnemonics:
    csrrc: 1
    csrrs: 15
    csrrw: 22
    sd: 43
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D9)): 2
    (rs2_val != 0xC): 81
    (rs2_val != 0xD): 81
    (rs2_val != 0xF): 81
    coverage: 4/4
  total_coverage: 11/11
mxr_set05:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (mstatus & 0x80000) == 0x80000: 13
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 3/3
  mnemonics:
    csrrc: 1
    csrrs: 15
    csrrw: 22
    sd: 43
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D9)): 2
    (rs2_val != 0xC): 81
    (rs2_val != 0xD): 81
    (rs2_val != 0xF): 81
    coverage: 4/4
  total_coverage: 11/11
mxr_set06:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (mstatus & 0x80000) == 0x80000: 13
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 3/3
  mnemonics:
    csrrc: 1
    csrrs: 15
    csrrw: 22
    sd: 43
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0D9)) if rs2_val is not None else None: 2
    (rs2_val != 0xC): 81
    (rs2_val != 0xD): 81
    (rs2_val != 0xF): 81
    coverage: 4/4
  total_coverage: 11/11
mxr_unset01:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (mstatus & 0x80000) == 0x0: 28
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 3/3
  mnemonics:
    csrrc: 2
    csrrs: 20
    csrrw: 25
    sd: 51
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C9)): 2
    (rs2_val == 0xD): 1
    coverage: 2/2
  total_coverage: 9/9
mxr_unset02:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (mstatus & 0x80000) == 0x0: 28
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 3/3
  mnemonics:
    csrrc: 2
    csrrs: 20
    csrrw: 25
    sd: 51
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0C9)): 2
    (rs2_val == 0xD): 1
    coverage: 2/2
  total_coverage: 9/9
mxr_unset03:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (mstatus & 0x80000) == 0x0: 28
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 3/3
  mnemonics:
    csrrc: 2
    csrrs: 20
    csrrw: 25
    sd: 51
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0C9)) if rs2_val is not None else None: 2
    (rs2_val == 0xD): 1
    coverage: 2/2
  total_coverage: 9/9
mxr_unset04:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (mstatus & 0x80000) == 0x0: 27
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 3/3
  mnemonics:
    csrrc: 2
    csrrs: 19
    csrrw: 25
    sd: 55
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D9)): 2
    (rs2_val == 0xD): 1
    coverage: 2/2
  total_coverage: 9/9
mxr_unset05:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (mstatus & 0x80000) == 0x0: 27
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 3/3
  mnemonics:
    csrrc: 2
    csrrs: 19
    csrrw: 25
    sd: 55
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D9)): 2
    (rs2_val == 0xD): 1
    coverage: 2/2
  total_coverage: 9/9
mxr_unset06:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (mstatus & 0x80000) == 0x0: 27
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 3/3
  mnemonics:
    csrrc: 2
    csrrs: 19
    csrrw: 25
    sd: 55
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0D9)) if rs2_val is not None else None: 2
    (rs2_val == 0xD): 1
    coverage: 2/2
  total_coverage: 9/9
nonleaf_pte01:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 25
    csrrw: 28
    sd: 64
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C1)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
nonleaf_pte02:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrc: 1
    csrrs: 24
    csrrw: 28
    sd: 68
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D1)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 9/9
nonleaf_pte03:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrc: 1
    csrrs: 54
    csrrw: 45
    sd: 134
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D1)): 2
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 8/8
pmp_pa01:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 30
    csrrw: 34
    ld: 97
    sd: 76
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C7)): 1
    (rs1_val == 0x0900001688 ) and ((pmpcfg0 & 0xFF00) >> 8 == 0x08): 2
    (rs2_val == 0x1): 1
    (rs2_val == 0x5): 1
    (rs2_val == 0x7): 1
    coverage: 5/5
  total_coverage: 11/11
pmp_pa02:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 30
    csrrw: 34
    ld: 97
    sd: 76
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0C7)): 1
    (rs1_val == 0x0901000688 ) and ((pmpcfg0 & 0xFF00) >> 8 == 0x08): 2
    (rs2_val == 0x1): 1
    (rs2_val == 0x5): 1
    (rs2_val == 0x7): 1
    coverage: 5/5
  total_coverage: 11/11
pmp_pa03:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 30
    csrrw: 34
    ld: 97
    sd: 76
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0C7)) if rs2_val is not None else None: 1
    (rs1_val == 0x0980000688 ) and ((pmpcfg0 & 0xFF00) >> 8 == 0x08): 2
    (rs2_val == 0x1): 1
    (rs2_val == 0x5): 1
    (rs2_val == 0x7): 1
    coverage: 5/5
  total_coverage: 11/11
pmp_pa04:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrc: 1
    csrrs: 29
    csrrw: 34
    ld: 97
    sd: 80
    coverage: 5/5
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D7)): 1
    (rs1_val == 0x0900001688 ) and ((pmpcfg0 & 0xFF00) >> 8 == 0x08): 2
    (rs2_val == 0x1): 1
    (rs2_val == 0x5): 1
    (rs2_val == 0x7): 1
    coverage: 5/5
  total_coverage: 12/12
pmp_pa05:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrc: 1
    csrrs: 29
    csrrw: 34
    ld: 97
    sd: 80
    coverage: 5/5
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D7)): 1
    (rs1_val == 0x0901000688 ) and ((pmpcfg0 & 0xFF00) >> 8 == 0x08): 2
    (rs2_val == 0x1): 1
    (rs2_val == 0x5): 1
    (rs2_val == 0x7): 1
    coverage: 5/5
  total_coverage: 12/12
pmp_pa06:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrc: 1
    csrrs: 29
    csrrw: 34
    ld: 97
    sd: 80
    coverage: 5/5
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0D7)) if rs2_val is not None else None: 1
    (rs1_val == 0x0980000688 ) and ((pmpcfg0 & 0xFF00) >> 8 == 0x08): 2
    (rs2_val == 0x1): 1
    (rs2_val == 0x5): 1
    (rs2_val == 0x7): 1
    coverage: 5/5
  total_coverage: 12/12
pmp_pte01:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 32
    csrrw: 34
    sd: 64
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C7)): 1
    (rs1_val >= (pmpaddr3 << 2)) and (rs1_val <= (pmpaddr3 << 2)) and ((pmpcfg0 & 0xFF000000) >> 24 == 0x18): 1
    (rs2_val == 0x5): 1
    (rs2_val == 0x7): 1
    coverage: 4/4
  total_coverage: 9/9
pmp_pte02:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 32
    csrrw: 34
    sd: 64
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0C7)): 1
    (rs1_val >= (pmpaddr2 << 2)) and (rs1_val <= (pmpaddr2 << 2)) and ((pmpcfg0 & 0xFF0000) >> 16 == 0x18): 1
    (rs2_val == 0x5): 1
    (rs2_val == 0x7): 1
    coverage: 4/4
  total_coverage: 9/9
pmp_pte03:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 32
    csrrw: 34
    sd: 64
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0C7)) if rs2_val is not None else None: 1
    (rs1_val >= (pmpaddr4 << 2)) and (rs1_val <= (pmpaddr4 << 2)) and ((pmpcfg0 & 0xFF00000000) >> 32 == 0x18): 1
    (rs2_val == 0x5): 1
    (rs2_val == 0x7): 1
    coverage: 4/4
  total_coverage: 9/9
pmp_pte04:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrc: 1
    csrrs: 31
    csrrw: 34
    sd: 68
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D7)): 1
    (rs1_val >= (pmpaddr3 << 2)) and (rs1_val <= (pmpaddr3 << 2)) and ((pmpcfg0 & 0xFF000000) >> 24 == 0x18): 1
    (rs2_val == 0x5): 1
    (rs2_val == 0x7): 1
    coverage: 4/4
  total_coverage: 10/10
pmp_pte05:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrc: 1
    csrrs: 31
    csrrw: 34
    sd: 68
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D7)): 1
    (rs1_val >= (pmpaddr2 << 2)) and (rs1_val <= (pmpaddr2 << 2)) and ((pmpcfg0 & 0xFF0000) >> 16 == 0x18): 1
    (rs2_val == 0x5): 1
    (rs2_val == 0x7): 1
    coverage: 4/4
  total_coverage: 10/10
pmp_pte06:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrc: 1
    csrrs: 31
    csrrw: 34
    sd: 68
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0D7)) if rs2_val is not None else None: 1
    (rs1_val >= (pmpaddr4 << 2)) and (rs1_val <= (pmpaddr4 << 2)) and ((pmpcfg0 & 0xFF00000000) >> 32 == 0x18): 1
    (rs2_val == 0x5): 1
    (rs2_val == 0x7): 1
    coverage: 4/4
  total_coverage: 10/10
pmp_pte07:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 61
    csrrw: 50
    sd: 130
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C7)): 1
    (rs1_val >= (pmpaddr3 << 2)) and ((pmpcfg0 & 0xFF000000) >> 24 == 0x18): 37
    (rs2_val == 0x1): 9
    coverage: 3/3
  total_coverage: 8/8
pmp_pte08:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 61
    csrrw: 50
    sd: 130
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0C7)): 1
    (rs1_val >= (pmpaddr2 << 2)) and ((pmpcfg0 & 0xFF0000) >> 16 == 0x18): 38
    (rs2_val == 0x1): 9
    coverage: 3/3
  total_coverage: 8/8
pmp_pte09:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 61
    csrrw: 50
    sd: 130
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0C7)) if rs2_val is not None else None: 1
    (rs1_val >= (pmpaddr4 << 2)) and ((pmpcfg0 & 0xFF00000000) >> 32 == 0x18): 36
    (rs2_val == 0x1): 9
    coverage: 3/3
  total_coverage: 8/8
pmp_pte10:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrc: 1
    csrrs: 60
    csrrw: 50
    sd: 134
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D7)): 1
    (rs1_val >= (pmpaddr3 << 2)) and ((pmpcfg0 & 0xFF000000) >> 24 == 0x18): 37
    (rs2_val == 0x1): 9
    coverage: 3/3
  total_coverage: 9/9
pmp_pte11:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrc: 1
    csrrs: 60
    csrrw: 50
    sd: 134
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D7)): 1
    (rs1_val >= (pmpaddr2 << 2)) and ((pmpcfg0 & 0xFF0000) >> 16 == 0x18): 38
    (rs2_val == 0x1): 9
    coverage: 3/3
  total_coverage: 9/9
pmp_pte12:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrc: 1
    csrrs: 60
    csrrw: 50
    sd: 134
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0D7)) if rs2_val is not None else None: 1
    (rs1_val >= (pmpaddr4 << 2)) and ((pmpcfg0 & 0xFF00000000) >> 32 == 0x18): 36
    (rs2_val == 0x1): 9
    coverage: 3/3
  total_coverage: 9/9
reserved_rwx01:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 25
    csrrw: 28
    sd: 64
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C5)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
reserved_rwx02:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 25
    csrrw: 28
    sd: 64
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0C5)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
reserved_rwx03:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrs: 25
    csrrw: 28
    sd: 64
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0C5)) if rs2_val is not None else None: 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 8/8
reserved_rwx04:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrc: 1
    csrrs: 24
    csrrw: 28
    sd: 68
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D5)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 9/9
reserved_rwx05:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrc: 1
    csrrs: 24
    csrrw: 28
    sd: 68
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D5)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 9/9
reserved_rwx06:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrc: 1
    csrrs: 24
    csrrw: 28
    sd: 68
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0D5)) if rs2_val is not None else None: 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 9/9
reserved_rwx07:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrc: 1
    csrrs: 54
    csrrw: 45
    sd: 134
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D5)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 8/8
reserved_rwx08:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrc: 1
    csrrs: 54
    csrrw: 45
    sd: 134
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D5)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 8/8
reserved_rwx09:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrc: 1
    csrrs: 54
    csrrw: 45
    sd: 134
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0D5)) if rs2_val is not None else None: 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 8/8
sum_set01:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (mstatus & 0x40000) == 0x40000: 13
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 3/3
  mnemonics:
    csrrs: 16
    csrrw: 22
    sd: 40
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D7)): 1
    (rs2_val != 0xC): 78
    (rs2_val != 0xD): 78
    (rs2_val != 0xF): 78
    coverage: 4/4
  total_coverage: 10/10
sum_set02:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (mstatus & 0x40000) == 0x40000: 13
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 3/3
  mnemonics:
    csrrs: 16
    csrrw: 22
    sd: 40
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D7)): 1
    (rs2_val != 0xC): 78
    (rs2_val != 0xD): 78
    (rs2_val != 0xF): 78
    coverage: 4/4
  total_coverage: 10/10
sum_set03:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (mstatus & 0x40000) == 0x40000: 13
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 3/3
  mnemonics:
    csrrs: 16
    csrrw: 22
    sd: 40
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0D7)) if rs2_val is not None else None: 1
    (rs2_val != 0xC): 78
    (rs2_val != 0xD): 78
    (rs2_val != 0xF): 78
    coverage: 4/4
  total_coverage: 10/10
sum_set04:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (mstatus & 0x40000) == 0x40000: 36
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 3/3
  mnemonics:
    csrrs: 56
    csrrw: 45
    sd: 130
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D7)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 8/8
sum_set05:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (mstatus & 0x40000) == 0x40000: 36
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 3/3
  mnemonics:
    csrrs: 56
    csrrw: 45
    sd: 130
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D7)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 8/8
sum_set06:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (mstatus & 0x40000) == 0x40000: 36
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 3/3
  mnemonics:
    csrrs: 56
    csrrw: 45
    sd: 130
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0D7)) if rs2_val is not None else None: 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 8/8
sum_unset01:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (mstatus & 0x40000) == 0x0: 30
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 3/3
  mnemonics:
    csrrs: 25
    csrrw: 28
    sd: 64
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D7)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 9/9
sum_unset02:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (mstatus & 0x40000) == 0x0: 30
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 3/3
  mnemonics:
    csrrs: 25
    csrrw: 28
    sd: 64
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D7)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 9/9
sum_unset03:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (mstatus & 0x40000) == 0x0: 30
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 3/3
  mnemonics:
    csrrs: 25
    csrrw: 28
    sd: 64
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0D7)) if rs2_val is not None else None: 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 9/9
sum_unset04:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (mstatus & 0x40000) == 0x0: 46
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 3/3
  mnemonics:
    csrrs: 55
    csrrw: 45
    sd: 130
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D7)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 8/8
sum_unset05:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (mstatus & 0x40000) == 0x0: 46
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 3/3
  mnemonics:
    csrrs: 55
    csrrw: 45
    sd: 130
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D7)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 8/8
sum_unset06:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0800 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (mstatus & 0x40000) == 0x0: 46
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 3/3
  mnemonics:
    csrrs: 55
    csrrw: 45
    sd: 130
    coverage: 3/3
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0D7)) if rs2_val is not None else None: 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 8/8
ubit_set01:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrc: 1
    csrrs: 24
    csrrw: 28
    sd: 68
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D1)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 9/9
ubit_set02:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrc: 1
    csrrs: 14
    csrrw: 22
    sd: 44
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0D7)): 1
    (rs2_val != 0xD): 81
    (rs2_val != 0xF): 81
    coverage: 3/3
  total_coverage: 9/9
ubit_set03:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrc: 1
    csrrs: 24
    csrrw: 28
    sd: 68
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D1)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 9/9
ubit_set04:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrc: 1
    csrrs: 14
    csrrw: 22
    sd: 44
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0D7)): 1
    (rs2_val != 0xD): 81
    (rs2_val != 0xF): 81
    coverage: 3/3
  total_coverage: 9/9
ubit_set05:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrc: 1
    csrrs: 24
    csrrw: 28
    sd: 68
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0D1)) if rs2_val is not None else None: 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 9/9
ubit_set06:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrc: 1
    csrrs: 14
    csrrw: 22
    sd: 44
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0D7)) if rs2_val is not None else None: 1
    (rs2_val != 0xD): 81
    (rs2_val != 0xF): 81
    coverage: 3/3
  total_coverage: 9/9
ubit_unset01:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrc: 1
    csrrs: 24
    csrrw: 28
    sd: 68
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C7)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 9/9
ubit_unset02:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrc: 1
    csrrs: 24
    csrrw: 28
    sd: 68
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0C7)): 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 9/9
ubit_unset03:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrc: 1
    csrrs: 24
    csrrw: 28
    sd: 68
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0C7)) if rs2_val is not None else None: 1
    (rs2_val == 0xD): 1
    (rs2_val == 0xF): 1
    coverage: 3/3
  total_coverage: 9/9
ubit_unset04:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrc: 1
    csrrs: 54
    csrrw: 45
    sd: 134
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000005) and ((rs2_val & 0xFFF) == 0x0C7)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 8/8
ubit_unset05:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrc: 1
    csrrs: 54
    csrrw: 45
    sd: 134
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000004) and ((rs2_val & 0xFFF) == 0x0C7)): 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 8/8
ubit_unset06:
  config:
  - check ISA:=regex(.*64.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
    def rvtest_strap_routine=True;
  csr_comb:
    (mstatus & 0x1800)  == 0x0000 and ( rs1 == 'x9' ) and (rd == 'x0'): 1
    (satp >> 60 == 0x8) and (rs1 == 'x31') and (rd == 'x0'): 1
    coverage: 2/2
  mnemonics:
    csrrc: 1
    csrrs: 54
    csrrw: 45
    sd: 134
    coverage: 4/4
  val_comb:
    (((rs1_val >> 12 ) == 0x80000000006) and ((rs2_val & 0xFFF) == 0x0C7)) if rs2_val is not None else None: 1
    (rs2_val == 0xC): 9
    coverage: 2/2
  total_coverage: 8/8
